-- device log program
-- by Tastyfish

os.loadAPI "extlib/dev"
os.loadAPI "extlib/gui"
os.loadAPI "extlib/dlgs"
os.loadAPI "extlib/db"
os.loadAPI "devlog/graph"

multishell.setTitle(multishell.getCurrent(), "Device Log")

local logDB = db.openOrCreate("devlog/log.db", {name="string", date="date", value="number"})
local devDB = db.openOrCreate("devlog/dev.db", {name="string", type="string", path="string"})
local modem = dev.get("modem")
local numTypes, getValueTab = dofile("devlog/types")

local keepXEntries = 1024
local cxt = gui.new(term.current())

local timerInterval = 2 * 60 -- 2 minutes
local updateTimer = nil

local function queryLogByName(name, count, skip)
	local q = logDB("$name == ?", name):sortByDescending("date")
	if skip then
		q:skip(skip)
	end
	if count then
		q:take(count)
	end
	return q
end

local function queryDevByType(name)
	local q = devDB("$type == ?", name):sortByAscending("name")
	return q
end

local function getDevice(name)
	return devDB("$name == ?", name):selectFirst()
end

local function keepOnlyXLogs()
	logDB():sortByDescending("date"):skip(keepXEntries):delete()
end

local function logDeviceValue(dev, periphs)
	local total = 0
	local totalCap = 0
	
	for i,periph in ipairs(periphs) do
		local pass, val, cap = pcall(getValueTab[dev.type], periph)
		-- silently don't include if bad device
		if pass and cap then
			val = val or 0
			total = total + val
			totalCap = totalCap + cap
		end
	end
	
	-- div0 prevention
	if totalCap == 0 then
		totalCap = 1
	end
	
	logDB:insert{
		name = dev.name,
		date = os.day() * 24 + os.time(),
		value = total / totalCap
	}
	if updateDeviceHandler then
		updateDeviceHandler(dev.name, val)
	end
end

local function logAllDevices()
	for d in devDB():iterate() do
		local periphs = {}
		for periph in d.path.value:gmatch("[^,]+") do
			table.insert(periphs, peripheral.wrap(periph))
		end
		d = {name = d.name.value, type = d.type.value}
		logDeviceValue(d, periphs)
	end
end

local function addDevice(name, tname, path)
	devDB:insert{
		name = name,
		type = tname,
		path = path
	}
end

local function updateDevice(oldName, name, tname, path)
	devDB("$name == ?", oldName):update {
		name = name,
		type = tname,
		path = path
	}
end

local function deleteDevice(name)
	assert(name)
	devDB("$name == ?", name):delete()
	logDB("$name == ?", name):delete()
end

local function deviceExists(name)
	assert(name)
	return devDB("$name == ?", name):selectFirst() ~= nil
end

-- screens
local addDevicePage, listDevicesPage, showDevicePage, showRawDevicePage

-- add OR edit device
addDevicePage = cxt:newForm {
	onSet = function(self)
		local typeBox = self.widgets.typeBox
		typeBox.items = { }
		typeBox.selectedItem = 1
		typeBox.scrollItem = 1
		for k,v in pairs(getValueTab) do
			table.insert(typeBox.items, k)
		end
		
		if self.oldDev then
			self.widgets.titleBar.text = "Edit "..self.oldDev.name
			self.widgets.newBtn.text = "Fix"
			self.widgets.nameBox.text = tostring(self.oldDev.name)
			local path = tostring(self.oldDev.path)
			self.widgets.pathBox.text = path:sub(1, self.widgets.pathBox.bounds.width - 4)
			self.widgets.pathBox2.text = path:sub(self.widgets.pathBox.bounds.width - 3, 2 * self.widgets.pathBox.bounds.width - 8)
			self.widgets.pathBox3.text = path:sub(2 * self.widgets.pathBox.bounds.width - 7, 3 * self.widgets.pathBox.bounds.width - 12)
			for i,t in ipairs(typeBox.items) do
				if t == tostring(self.oldDev.type) then
					typeBox.selectedItem = i
					break
				end
			end
		else
			self.widgets.titleBar.text = "Add Device"
			self.widgets.newBtn.text = "New"
			self.widgets.nameBox.text = ""
			self.widgets.pathBox.text = ""
			self.widgets.pathBox2.text = ""
			self.widgets.pathBox3.text = ""
		end
	end,
	widgets = {
		titleBar = dlgs.newTitleBar {
			text = "Add Device"
		},
		gui.newLabel {
			text = "Name:",
			align = "far",
			bounds = rect.new(2, 3, 12, 1)
		},
		nameBox = gui.newTextbox {
			bounds = rect.new(15, 3, -15, 1)
		},
		gui.newLabel {
			text = "Type:",
			align = "far",
			bounds = rect.new(2, 5, 12, 1)
		},
		typeBox = gui.newListBox {
			bounds = rect.new(15, 5, -15, numTypes)
		},
		gui.newLabel {
			text = "Path:",
			align = "far",
			bounds = rect.new(2, 6+numTypes, 12, 1)
		},
		pathBox = gui.newTextbox {
			bounds = rect.new(15, 6+numTypes, -15, 1)
		},
		pathBox2 = gui.newTextbox {
			bounds = rect.new(15, 7+numTypes, -15, 1)
		},
		pathBox3 = gui.newTextbox {
			bounds = rect.new(15, 8+numTypes, -15, 1)
		},
		newBtn = gui.newButton {
			text = "New",
			color = colors.green,
			highlight = colors.lime,
			bounds = rect.new(-6, 10+numTypes, 5, 3),
			click = function(self)
				local w = self.parent.widgets
				if w.nameBox.text ~= "" and w.pathBox.text ~= "" and w.typeBox.selectedItem > 0 then
					if self.oldDev then
						updateDevice(tostring(self.oldDev.name), 
							w.nameBox.text, w.typeBox.items[w.typeBox.selectedItem],
							w.pathBox.text..w.pathBox2.text..w.pathBox3.text)
					else
						if deviceExists(w.nameBox.text) then
							dlgs.msgbox(cxt, nil, "Device already exists.", "OK")
							return
						end
						
						addDevice(w.nameBox.text, w.typeBox.items[w.typeBox.selectedItem],
							w.pathBox.text..w.pathBox2.text..w.pathBox3.text)
					end
					listDevicesPage:show()
				else
					dlgs.msgbox(cxt, nil, "Invalid input.", "OK")
				end
			end
		},
		gui.newButton {
			text = "Cancel",
			color = colors.red,
			highlight = colors.pink,
			bounds = rect.new(2, 10+numTypes, 8, 3),
			click = function()
				listDevicesPage:show()
			end
		},
	}
}

listDevicesPage = cxt:newForm {
	onSet = function(self)
		local typeBox = self.widgets.typeBox
		self.context.selectedWidget = typeBox
		
		typeBox.items = {}
		for k,_ in pairs(getValueTab) do
			table.insert(typeBox.items, k)
		end
		typeBox:select()
	end,
	widgets = {
		dlgs.newTitleBar {
			text = "Select Device"..(byType and " - "..byType or ""),
		},
		dlgs.newCloseButton { },
		gui.newButton {
			text = "+",
			bounds = rect.new(1, 1, 3, 1),
			click = function()
				addDevicePage.oldDev = nil
				addDevicePage:show()
			end
		},
		typeBox = gui.newListBox {
			bounds = rect.new(1, 3, 8, -2),
			items = {},
			select = function(self)
				local listBox = self.parent.widgets.listBox
				
				local t = self.items[self.selectedItem]
				listBox.items = queryDevByType(t):select("name")
				listBox.selectedItem = 1
				listBox.scrollItem = 1
				listBox:draw(screen)
			end,
		},
		listBox = gui.newListBox {
			bounds = rect.new(10, 3, -9, -2),
			items = devDB():sortByAscending("name"):select("name"),
			autoSelect = false,
			select = function(self)
				local devName = self.items[self.selectedItem]
				if devName then
					showDevicePage.devName = devName
					showDevicePage:show()
				end
			end,
		}
	}
}

local updateDeviceHandler = nil

showDevicePage = cxt:newForm {
	onSet = function(self)
		self.device = getDevice(self.devName):values()
		local valG = self.widgets.valG
		
		self.widgets[1].text = "View Device - "..self.devName.." [ "..self.device.type.." ]"
		
		for e in queryLogByName(self.device.name, valG.bounds.width):sortByAscending("date"):iterate() do
			valG:addValue(e.value.value)
		end
		
		updateDeviceHandler = function(dname, val)
			if devName == dname then
				valG:addValue(val)
				valG:draw(screen)
			end
		end
	end,
	widgets = {
		dlgs.newTitleBar {
			text = "View Device - "
		},
		gui.newButton {
			text = "View Raw Data",
			bounds = rect.new(1, -1, 0, 1),
			click = function(self)
				updateDeviceHandler = nil
				showRawDevicePage.devName = self.parent.devName
				showRawDevicePage:show()
			end
		},
		dlgs.newCloseButton {
			click = function()
				updateDeviceHandler = nil
				listDevicesPage:show()
			end,
		},
		valG = graph.newGraph {
			bounds = rect.new(1, 3, 0, -4),
			color = colors.yellow,
			fill = colors.green
		}
	}
}

local pageSize = cxt.height - 4
local pageBtnW = math.floor(cxt.width / 2 - 3)
showRawDevicePage = cxt:newForm {
	onSet = function(self)
		self.device = getDevice(self.devName):values()
		self.page = 1
		
		self.widgets.lblTitle.text = "View Device - "..self.device.name.." [ "..self.device.type.." ]"
		
		self:updateList()
	end,
	updateList = function(self)
		self.widgets.pageLabel.text = tostring(self.page)
		self.widgets.listBox.items = queryLogByName(self.devName, pageSize, (self.page - 1) * pageSize):select(function(e)
			return e.date.." - "..e.value
		end)
		
		self.widgets.pageLabel:draw()
		self.widgets.listBox:draw()
	end,
	widgets = {
		lblTitle = dlgs.newTitleBar {
			text = "View Device - "
		},
		dlgs.newMenuButton {
			menu = {
				{"Edit", function()
					addDevicePage.oldDev = showRawDevicePage.device
					addDevicePage:show()
				end},
				{"Remove", function()
					dlgs.msgbox(cxt,
						function(result)
							if result == 1 then
								deleteDevice(showRawDevicePage.devName)
								listDevicesPage:show()
							end
						end,
						"This will permanently delete all log data for "..showRawDevicePage.devName..".", "Delete", "Cancel")
				end}
			},
		},
		dlgs.newCloseButton {
			click = function(self)
				showDevicePage.devName = self.parent.devName
				showDevicePage:show()
			end,
		},
		listBox = gui.newListBox {
			bounds = rect.new(1, 3, 0, pageSize)
		},
		gui.newButton {
			text = "< Prev",
			bounds = rect.new(1, -1, pageBtnW, 1),
			click = function(self)
				if self.parent.page <= 1 then
					return
				end
				self.parent.page = self.parent.page - 1
				self.parent:updateList()
			end
		},
		gui.newButton {
			text = "Next >",
			bounds = rect.new(-pageBtnW, -1, pageBtnW, 1),
			click = function(self)
				self.parent.page = self.parent.page + 1
				self.parent:updateList()
			end
		},
		pageLabel = gui.newLabel {
			text = "1",
			bounds = rect.new(math.floor(cxt.width / 2) - 1, -1, 5, 1),
			color = colors.white
		}
	}
}

local function updateTick()
	keepOnlyXLogs()
	logAllDevices()
	updateTimer = os.startTimer(timerInterval)
end

-- main program loop
--updateTick()
listDevicesPage:show()
cxt:run {
	timer = function(id)
		if id == updateTimer then
			updateTick()
		end
	end
}
